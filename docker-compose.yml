services:
  caddy:
    image: caddy:2.6.2
    container_name: caddy
    ports:
      - "80:80"
      - "80:80/udp"
      - "443:443"
      - "443:443/udp"
    restart: always
    volumes:
      - ./caddy/data:/data
      - ./caddy/config:/config
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/sites:/etc/caddy/sites
      - ./blog/web:/srv/typecho
      - ./smart-home/media:/srv/smart-home/media
      - ./smart-home/static:/srv/smart-home/static
      - ./smart-home/web:/srv/smart-home/web
      - ./smart-home/assetlinks.json:/srv/smart-home/web/.well-known/assetlinks.json
    depends_on:
      - typecho
      - smart-home
  typecho:
    image: joyqi/typecho:1.2.0-php8.0-apache
    container_name: typecho
    restart: always
    volumes:
      - ./blog/usr:/app/usr
    environment:
      - TYPECHO_SITE_URL=https://example.com
      - TYPECHO_INSTALL=1
      - TIMEZONE=Asia/Shanghai
      - MEMORY_LIMIT=100m
      - MAX_POST_BODY=50m
      - TYPECHO_DB_ADAPTER=Pdo_Pgsql
      - TYPECHO_DB_NEXT=keep
    env_file:
      - ./.env
    depends_on:
      postgres:
          condition: service_healthy
  smart-home:
    image: he0119/smart-home:latest
    container_name: smart-home
    restart: always
    user: 1000:1000
    volumes:
      - ./smart-home/static:/app/static
      - ./smart-home/logs:/app/logs
      - ./smart-home/geoip:/app/geoip
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  celery:
    image: he0119/smart-home:latest
    command: celery -A home worker --beat -l info
    container_name: celery
    restart: always
    user: 1000:1000
    volumes:
      - ./smart-home/logs:/app/logs
      - ./smart-home/geoip:/app/geoip
    env_file:
      - ./.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  postgres:
    build: ./postgres
    image: he0119/postgres:14
    container_name: postgres
    restart: always
    volumes:
      - ./postgres/pgdata:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:6
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
networks:
  default:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
        - subnet: fd00::/80
